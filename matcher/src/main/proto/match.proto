syntax = "proto2";

package match;

option java_package = "com.oneroadtrip.matcher";
option java_multiple_files = true;

import "common.proto";

message SignupRequest {
  optional string username = 1;
  optional string email = 2;
  optional string password = 3;
}

message SignupResponse {
  optional Status status = 1;
  optional string token = 2;
}

message LoginRequest {
  optional string username = 1;
  optional string password = 2;
}

message LoginResponse {
  optional Status status = 1 [default = SUCCESS];
  optional string token = 2;
}

message CityRequest {
}

message CityResponse {
  message City {
    optional int64 city_id = 1;
    optional string name = 2;
    optional int32 suggest = 3;
    optional int32 min = 4;
    optional int32 max = 5;
  }

  optional Status status = 1;
  repeated City city = 2;
}

enum TransportationType {
  SHUTTLE = 1;
  PLANE = 2;
  WALK = 3;
  CAR = 4;
  PUBLIC_TRANSIT = 5;
  OTHERS = 6;
}

message VisitCity {
  optional int64 city_id = 1;
  optional string city_name = 2;
  optional int32 num_days = 3;
  // suggest_rate用来描述这个城市有多大的旅游价值，是一个0..1之间的数，1是必须要去的城市，
  // 即请求中填的出发、到达和途径城市，其它城市是按路线由后端推荐的。
  optional float suggest_rate = 4;
}

message Edge {
  optional int64 from_city_id = 1;
  optional string from_city = 2;
  optional int64 to_city_id = 3;
  optional string to_city = 4;
  optional int32 distance = 5;
  optional int32 hours = 6;
  optional TransportationType transportation_type = 7 [ default = SHUTTLE ];
}

message PlanRequest {
  optional int64 start_city_id = 1;
  optional int64 end_city_id = 2;
  // - visit_city里面包括所有途经的城市，还有起点和终点。如果没有包括进去的话，我们在做plan的
  //   时候会把它放进去。
  // - visit_city.num_days表示该城市访问的天数。如果为0的话，说明希望系统建议。
  repeated VisitCity visit_city = 3;

  // 下面一项如果是true的话，我们会保持途经城市的次序。
  optional bool keep_order_of_via_cities = 4 [ default = false ];
  optional int32 startdate = 5;
  optional int32 enddate = 6;  // 不包括enddate这天！
}

message PlanResponse {
	optional Status status = 1 [ default = SUCCESS ];

  // visit + edge 组成一条路线。这里有些细节需要注意：
  // - 首先，一开始的城市有可能不是visit中的第一个城市，同样，离开的城市也有可能不是最后一个
  //   城市。这就意味着，我们有可能落地了之后，马上坐车离开该城市。只有当该城市被放置到
  //   PlanRequest.visit_city当中的时候，我们才将其考虑为我们需要访问的城市。
  // - 我们将keep这样的关系：visit.size() + 1 = edge.size()
  //   这也意味着，即使到达城市跟第一个旅游城市一致的时候，我们也会构造一条长为0的边来连接
  //   他们。
  optional int64 start_city_id = 2;
  optional string start_city = 3;
  optional int64 end_city_id = 4;
  optional string end_city = 5;
  repeated VisitCity visit = 6;
  repeated Edge edge = 7;

  // suggest_city：这是推荐城市，所有可达城市，我们都会放到这里来，当然，suggest_rate
  // 不一样。
  repeated VisitCity suggest_city = 8;
}

// TODO(xfguo): (P5) GuideRequest and GuideResponse
message TravelRequest {
  optional string token = 1;
  optional string destination = 2;
  optional int32 startdate = 3;
  optional int32 enddate = 4;
  optional int32 adults = 5;
  optional int32 kids = 6;
  optional int32 seniors = 7;
  repeated string interests = 8;
  optional int32 level = 9;
  optional bool need_air_ticket = 10;
  optional bool need_hotel = 11;
  optional bool need_transportation = 12;
  optional bool need_vip = 13;
}

message ChosenGuide {
  optional string name = 1;
  optional string photo_id = 2;
  optional float score = 3;
  optional string description = 4;
  optional int32 experience = 5;
  optional bool has_car = 6;
  optional int32 max_people = 7;
  repeated string language = 8;
  optional string citizenship = 9; // 国籍
  optional float price_usd = 10;
  optional float price_cny = 11;
}

message TravelResponse {
  optional Status status = 1 [default = SUCCESS];
  repeated ChosenGuide guide = 2;
}
